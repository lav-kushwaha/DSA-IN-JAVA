#StringBuilder class in Java

In Java, StringBuilder is a class used to create and manipulate strings more efficiently than using String when multiple modifications to a string are needed.
Unlike String, which is immutable, StringBuilder allows for the modification of the string content without creating new objects, leading to better performance.

#Use StringBuilder for mutable strings and when you expect to modify the string content frequently.
#Common methods include append, insert, replace, delete, reverse, and toString.
#For thread-safe operations, consider using StringBuffer instead.

#Difference between String, StringBuilder, and StringBuffer In Java.

In Java, String, StringBuilder, and StringBuffer are three classes used to handle strings.
Each has its own characteristics and use cases. Below is a comparison of these three classes:

1. String
Immutable: Once a String object is created, it cannot be modified. Any modification to a string results in the creation of a new string.
Thread-Safe: Because strings are immutable, they are inherently thread-safe.
Performance: Modifying strings frequently can lead to performance issues due to the creation of many intermediate objects.
Usage: Suitable for scenarios where the string value does not change frequently.

Example:
public class StringExample {
    public static void main(String[] args) {
        String str = "Hello";
        str = str + " World";  // Creates a new String object
        System.out.println(str);  // Output: Hello World
    }
}

2. StringBuilder
Mutable: StringBuilder objects can be modified without creating new objects.
Not Thread-Safe: StringBuilder is not synchronized, meaning it's not safe to use from multiple threads simultaneously without external synchronization.
Performance: More efficient than String when performing multiple modifications on the string.
Usage: Suitable for single-threaded scenarios where frequent modifications to the string are needed.

Example:
public class StringBuilderExample {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        sb.append(" World");
        System.out.println(sb.toString());  // Output: Hello World
    }
}

3. StringBuffer
Mutable: Like StringBuilder, StringBuffer objects can be modified without creating new objects.
Thread-Safe: StringBuffer is synchronized, meaning it is safe to use in multi-threaded environments.
Performance: Slower than StringBuilder due to the overhead of synchronization.
Usage: Suitable for multi-threaded scenarios where frequent modifications to the string are needed.

Example:
public class StringBufferExample {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        sb.append(" World");
        System.out.println(sb.toString());  // Output: Hello World
    }
}


