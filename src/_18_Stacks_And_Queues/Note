//When to used stack and queues?.

#When to Use Stacks:
->Use stacks for problems requiring Last In, First Out (LIFO) access.
->Common operations: push, pop, and peek.
->Typical use cases: parsing expressions, backtracking, managing function calls, and handling undo operations.

#When to Use Queues:
->Use queues for problems requiring First In, First Out (FIFO) access.
->Common operations: add/offer, poll/remove, and peek.
->Typical use cases: task scheduling, breadth-first search, implementing caches, and handling order-sensitive operations.

#Stack Methods in Java
empty(): Checks if the stack is empty.
peek(): Looks at the top element without removing it.
pop(): Removes and returns the top element.
push(E item): Adds an item to the top of the stack.
search(Object o): Finds the position of an element in the stack (1-based index).

#Queue Methods in Java
add(E e): Inserts an element, throws if capacity is exceeded.
offer(E e): Inserts an element, returns false if capacity is exceeded.
remove(): Retrieves and removes the head element, throws if the queue is empty.
poll(): Retrieves and removes the head element, returns null if the queue is empty.
element(): Retrieves but does not remove the head element, throws if the queue is empty.
peek(): Retrieves but does not remove the head element, returns null if the queue is empty.

#Stack Patterns:

Use for problems requiring LIFO access.
Common operations: push, pop, and peek.
Typical use cases: balanced parentheses, reversing strings, evaluating expressions, next greater element.

#Queue Patterns:

Use for problems requiring FIFO access.
Common operations: add/offer, poll/remove, and peek.
Typical use cases: level order traversal, implementing caches, task scheduling, sliding window problems.


#Questions.

Q : What is a deque in Java?
=>A linear collection that supports element insertion and removal at both ends.
=>The name deque is short for "double ended queue" and is usually pronounced "deck".

Q: What is the difference between queue and deque in Java?
#Key Differences Between Queues and Deques.
=>As the table summarizes, queues only allow access from one end, enforcing FIFO order.
=>Deques are more flexible â€“ they provide access at both ends and can maintain both FIFO and LIFO order.

Q : What is the difference between ArrayList and ArrayDeque?
=>In ArrayList when we add an object in front end. then every object shift towards right.
But in ArrayDeque we we add an object in front end, memory expands toward left and no object shift towards right.

Q : Why use ArrayDeque?
=>In terms of efficiency, ArrayDeque is more efficient than the LinkedList for add and remove operation at both ends.
The best operation in a LinkedList implementation is removing the current element during the iteration.
=>LinkedList implementations are not ideal structures to iterate.

