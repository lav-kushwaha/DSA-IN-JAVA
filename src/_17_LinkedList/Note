while (current.next != null) {
    current = current.next; //Stops when: current.next becomes null, meaning current is the last node in the list.
}

while (current != null) {
    current = current.next; //Stops when: current becomes null, meaning it has reached the end of the list (one step beyond the last node).
}

Q.What is the Difference btw both while loop condition ?
=> So, the difference is that the first loop stops when current reaches the last node,
 while the second loop goes one step further, continuing until "current becomes null", signifying the end of the list.


NOTE : head == null, means no element and head.next == null means there is one element on head.


#Some common linked list patterns along with examples:

1. Two Pointers Technique:
   - Use two pointers to traverse the list at different speeds, often to find the midpoint, detect cycles, or solve problems requiring reverse traversal.
   - Example: Finding the middle of a linked list, detecting cycles in a linked list.

2. Runner Technique:
   - Similar to the Two Pointers Technique, but with one pointer moving faster than the other.
   - Example: Checking for intersection or finding the start of the loop in a cyclic linked list.

3. Sliding Window Technique:
   - Uses a fixed-size window that slides through the list, often to find sublists or subsequences that satisfy certain conditions.
   - Example: Finding the maximum sum of a contiguous subarray in a linked list.

4. Floyd's Tortoise and Hare Algorithm:
   - A cycle detection algorithm using two pointers moving at different speeds to detect cycles in a linked list.
   - Example: Detecting cycles in a linked list.

5. Recursion:
   - Use recursive calls to solve problems, often involving traversal or modification of the linked list.
   - Example: Reversing a linked list recursively, merging two sorted linked lists recursively.

6. Dummy Node Technique:
   - Introduce a dummy node to simplify operations, especially at the beginning or end of the list.
   - Example: Adding two numbers represented by linked lists, where each node contains a single digit.

7. Reverse Technique:
   - Reverse the linked list or a portion of it to simplify operations.
   - Example: Reversing a linked list, reversing nodes in k-group.


====================================================Linked_List_Notes==========================================================

A linked list is a linear data structure in which elements are stored in nodes, and each node points to the next node in the sequence.
Internally, a linked list is implemented using nodes where each node contains two parts: the data and a reference (or pointer) to the next node in the sequence.

Here's a breakdown of how a linked list works internally:

#Structure of a Node
In a singly linked list, each node contains:

1.Data: The actual value stored in the node.
2.Next: A reference to the next node in the list.

In a doubly linked list, each node contains:

1.Data: The actual value stored in the node.
2.Next: A reference to the next node in the list.
3.Previous: A reference to the previous node in the list.

#Types of Linked Lists

1.Singly Linked List: Each node points to the next node in the sequence.
2.Doubly Linked List: Each node points to both the next and the previous node, allowing traversal in both directions.
3.Circular Linked List: The last node points back to the first node, forming a circle.

# Basic Operations

1. Insertion

● At the Beginning:

Create a new node.
Set the new node's next reference to the current head of the list.
Update the head of the list to be the new node.

● At the End:

Create a new node.
Traverse the list to find the last node.
Set the last node's next reference to the new node.


● At a Given Position:

Traverse the list to the node just before the desired position.
Create a new node.
Set the new node's next reference to the next node of the current node.
Update the current node's next reference to the new node.

2. Deletion

● From the Beginning:

Update the head of the list to be the next node of the current head.

● From the End:

Traverse the list to find the second-to-last node.
Set the second-to-last node's next reference to null.

● From a Given Position:

Traverse the list to the node just before the desired position.
Update the next reference of the current node to skip over the node to be deleted.

3. Traversal
Start at the head of the list.
Follow the next references to move from one node to the next.
Continue until the end of the list (where the next reference is null).


● Key Points
Flexibility: Linked lists allow for efficient insertions and deletions, especially at the beginning or end of the list.
Memory Usage: Linked lists use more memory than arrays because of the storage required for the next (and possibly previous) references.
Traversal Time: Access time for elements is linear (O(n)) since elements are accessed sequentially.

