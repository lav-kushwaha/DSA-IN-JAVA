#StringBuffer class in Java

StringBuffer is a class in Java that represents a mutable sequence of characters.
It provides an alternative to the immutable String class, allowing you to modify the contents of a string without creating a new object every time.

Here are some important features and methods of the StringBuffer class:
StringBuffer objects are mutable, meaning that you can change the contents of the buffer without creating a new object.
The initial capacity of a StringBuffer can be specified when it is created, or it can be set later with the ensureCapacity() method.
The append() method is used to add characters, strings, or other objects to the end of the buffer.
The insert() method is used to insert characters, strings, or other objects at a specified position in the buffer.
The delete() method is used to remove characters from the buffer.
The reverse() method is used to reverse the order of the characters in the buffer.


#Difference between String, StringBuilder, and StringBuffer In Java.

In Java, String, StringBuilder, and StringBuffer are three classes used to handle strings.
Each has its own characteristics and use cases. Below is a comparison of these three classes:

1. String
Immutable: Once a String object is created, it cannot be modified. Any modification to a string results in the creation of a new string.
Thread-Safe: Because strings are immutable, they are inherently thread-safe.
Performance: Modifying strings frequently can lead to performance issues due to the creation of many intermediate objects.
Usage: Suitable for scenarios where the string value does not change frequently.

Example:
public class StringExample {
    public static void main(String[] args) {
        String str = "Hello";
        str = str + " World";  // Creates a new String object
        System.out.println(str);  // Output: Hello World
    }
}

2. StringBuilder
Mutable: StringBuilder objects can be modified without creating new objects.
Not Thread-Safe: StringBuilder is not synchronized, meaning it's not safe to use from multiple threads simultaneously without external synchronization.
Performance: More efficient than String when performing multiple modifications on the string.
Usage: Suitable for single-threaded scenarios where frequent modifications to the string are needed.

Example:
public class StringBuilderExample {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        sb.append(" World");
        System.out.println(sb.toString());  // Output: Hello World
    }
}

3. StringBuffer
Mutable: Like StringBuilder, StringBuffer objects can be modified without creating new objects.
Thread-Safe: StringBuffer is synchronized, meaning it is safe to use in multi-threaded environments.
Performance: Slower than StringBuilder due to the overhead of synchronization.
Usage: Suitable for multi-threaded scenarios where frequent modifications to the string are needed.

Example:
public class StringBufferExample {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        sb.append(" World");
        System.out.println(sb.toString());  // Output: Hello World
    }
}


