Q.What is Radix Sort ?
Radix Sort is a non-comparative sorting algorithm that sorts numbers or strings by processing their individual digits or characters.
Unlike comparison-based sorting algorithms like Quick Sort or Merge Sort, Radix Sort works by distributing elements into different "buckets" based on their individual digit or character values, and then reassembling them in order.

Q.When to Use Radix Sort
Radix Sort is particularly useful when:
The range of the input numbers is large, but the length of the keys (digits or characters) is relatively small.
The keys are strings or other data types where lexicographical order is needed.
A stable sorting algorithm is required.

Radix Sort may not be the best choice for small datasets or when the number of digits k is large compared to n.
In such cases, the overhead of managing the buckets may outweigh the advantages of non-comparative sorting.

#fill()
The fill() method in Java is part of the java.util.Arrays class and is used to assign a specified value to each element of an array.
This method allows for quick initialization or resetting of all elements in the array to the same value.

#Syntax :
There are several overloaded versions of the fill() method in Java:

1.Filling entire arrays:

Arrays.fill(array, value);

This version sets every element of the specified array to the given value.

2.Filling a specific range within an array:
Arrays.fill(array, fromIndex, toIndex, value);
This version sets each element in a specified range within the array to the given value. The range is specified by fromIndex (inclusive) and toIndex (exclusive).

Examples :

1.Filling an entire array:

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] numbers = new int[5];
        Arrays.fill(numbers, 10);  // Fills the entire array with 10
        System.out.println(Arrays.toString(numbers));  // Output: [10, 10, 10, 10, 10]
    }
}


2.Filling a specific range in an array:

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] numbers = new int[5];
        Arrays.fill(numbers, 1, 4, 20);  // Fills the array from index 1 to 3 (4 is exclusive) with 20
        System.out.println(Arrays.toString(numbers));  // Output: [0, 20, 20, 20, 0]
    }
}

#Time Complexity of Radix Sort
=>Radix Sort is a non-comparative sorting algorithm that sorts numbers by processing individual digits. The time complexity of Radix Sort depends on the following factors:
n: The number of elements to be sorted.
d: The number of digits in the maximum element.

Time Complexity: O(d√ó(n+k)) or O(n) for constant d and k.
Space Complexity: O(n+k) or O(n) for constant k.



