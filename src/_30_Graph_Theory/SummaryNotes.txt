 Graph Algorithms ‚Äì Summary Notes

üîç Traversal Algorithms
BFS (Breadth-First Search)
‚û§ Explores the graph level by level (like a wave).
‚û§ Uses a queue (FIFO).
‚û§ Finds the shortest path in an unweighted graph.
‚û§ Good for finding the minimum number of edges from the source.

DFS (Depth-First Search)
‚û§ Explores the graph deeply first, then backtracks.
‚û§ Uses recursion or a stack.
‚û§ Useful for cycle detection, topological sorting, and exploring connected components.

üìç Shortest Path Algorithms
Dijkstra‚Äôs Algorithm
‚û§ Finds the shortest path from a single source to all other nodes.
‚û§ Works only with non-negative edge weights.
‚û§ Uses a priority queue (min-heap).

Bellman-Ford Algorithm
‚û§ Same goal as Dijkstra: shortest path from a single source.
‚û§ Works with negative edge weights.
‚û§ Can detect negative weight cycles.

Floyd-Warshall Algorithm
‚û§ Finds shortest paths between all pairs of nodes.
‚û§ Works for negative weights (no negative cycles).
‚û§ Time complexity: O(V¬≥).

üå≤ Minimum Spanning Tree (MST)
Prim‚Äôs Algorithm
‚û§ Builds MST by growing the tree from any starting node.
‚û§ Always adds the lowest weight edge connecting the tree to a new node.
‚û§ Uses a priority queue.

Kruskal‚Äôs Algorithm
‚û§ Builds MST by sorting all edges and picking the smallest ones.
‚û§ Uses Disjoint Set Union (DSU) to avoid cycles.
‚û§ Edges are added globally in order of weight.

üîÅ Other Important Algorithms
Topological Sort
‚û§ Only for DAGs (Directed Acyclic Graphs).
‚û§ Prints nodes in an order such that for every edge u ‚Üí v, u comes before v.
‚û§ Nodes with no incoming edges are processed first.
‚û§ Useful for task scheduling, build systems, etc.