#How Heights of tree is working :

public class Node {
        private int value;  // Value stored in the node
        private int height; // Height of the node
        private Node left;  // Left child
        private Node right; // Right child

        // Constructor to initialize the node with a value
        public Node(int value) {
            this.value = value;
        }

        // Getter for the node's value
        public int getValue() {
            return value;
        }
    }

===============================================================+++++++++++++++++++++++++++++++++++++++++++==============================

#Height Method :
  public int height(Node node) {
        // If the node is null, its height is considered -1
        if (node == null) {
            return -1;
        }
        // Return the height of the node
        return node.height;  //Here, null to 0 comes after inserting node root node 15
    }

#code for calculating height(Insert Method) :
=> node.height = Math.max(height(node.left), height(node.right)) + 1; // +1 to account for the new node

NOTE : initially, height is null
For Node 15 height calculating :
height(null) = max(height(null), height(null)) + 1
             = max(-1, -1) + 1
             = -1 + 1
height(null) = 0 height for root node 15


for Node 15 and left side node 10 height calculating :
height(15) = max(height(10), height(null)) + 1
           = max(0, -1) + 1
           = 0 + 1
           = 1

Final Heights

Node 15: Height is 1.
Node 10: Height is 0.

Conclusion
After inserting 10 into the tree with root node 15, the updated tree structure and heights are as follows:

      15 (Height: 1)
     /
    10 (Height: 0)

The height of the root node 15 is now 1, and the height of the node 10 is 0.
This correctly follows the definition where the height of a leaf node is 0 and the height of an internal node is one more than the maximum height of its children.

======================================================++++++++++++++++++++++++=============================================================
#Simple method to calculate height.

   // Method to calculate the height of the BST
    int height() {
        return heightRec(root);
    }

    // Recursive method to calculate the height of the BST
    int heightRec(Node root) {
        if (root == null) {
            return 0;
        } else {
            // Compute the height of each subtree
            int leftHeight = heightRec(root.left);
            int rightHeight = heightRec(root.right);

            // Use the larger one
            return Math.max(leftHeight, rightHeight) + 1;
        }
    }


#Balanced Tree Definition:

A binary tree is balanced if, for every node in the tree, the height difference between the left subtree and the right subtree is at most one.
A binary tree is balanced if the height difference between the left and right subtrees of every node is at most one.
This ensures efficient operations and maintains the tree's overall structure. The provided code checks for balance by comparing subtree heights and ensuring the difference is within the acceptable range.


========================================================+++++++++++++++++++++++++++++++++++++++++++================================================
#Traversals :

1. Preorder Traversals : -

// Method to perform preorder traversal and print the values
public void preorderTraversal() {
    preorderTraversal(root);
}

private void preorderTraversal(Node node) {
    if (node == null) {
        return;
    }

    // Visit the root node
    System.out.print(node.getValue() + " ");

    // Recursively visit the left subtree
    preorderTraversal(node.left);

    // Recursively visit the right subtree
    preorderTraversal(node.right);
}

// Driver program to test preorder traversal
public static void main(String[] args) {
    BinarySearchTree tree = new BinarySearchTree();

    // Insert nodes
    tree.insert(50);
    tree.insert(30);
    tree.insert(20);
    tree.insert(40);
    tree.insert(70);
    tree.insert(60);
    tree.insert(80);

    // Display the tree
    System.out.println("Display the tree:");
    tree.display();

    // Perform preorder traversal
    System.out.println("\nPreorder traversal of the tree:");
    tree.preorderTraversal();
}

#uses of preorder traversals :

Preorder traversal is a method of visiting all the nodes in a binary tree in a specific order: root node first, followed by the left subtree, and then the right subtree.
This traversal is particularly useful in several scenarios:

#Creating a Copy of the Tree :
When you want to duplicate a tree, you can use preorder traversal to visit each node and create a new node with the same value in the new tree.

#Expression Trees :
In expression trees (used in compilers and expression evaluation), preorder traversal can be used to generate the prefix notation (Polish notation) of the expression.

#Serialization and Deserialization :
Preorder traversal is often used in serialization (converting a tree to a string or array)
and deserialization (reconstructing a tree from a string or array).
This is because the root-first order is easy to serialize and deserialize while maintaining the tree structure.

#Tree Modifications:
When performing operations that need to modify the tree, like mirroring or flattening the tree, preorder traversal can be used to visit and modify nodes in a structured way.

