#DFS (Depth-First Search) and BFS (Breadth-First Search)

DFS (Depth-First Search) and BFS (Breadth-First Search) are indeed widely used in tree traversal as well as in graph traversal.
Here are their applications and implementations in the context of trees:

#Depth-First Search (DFS) in Trees
In trees, DFS can be implemented in three main ways: Preorder, Inorder, and Postorder traversal.

1. Preorder Traversal (Root, Left, Right)
Visit the root node, then recursively visit the left subtree, and finally the right subtree.

2. Inorder Traversal (Left, Root, Right)
Recursively visit the left subtree, then visit the root node, and finally the right subtree.

3. Postorder Traversal (Left, Right, Root)
Recursively visit the left subtree, then the right subtree, and finally the root node.

#Depth-First Search (DFS) in Java
Preorder, Inorder, and Postorder Traversal

#Implementations :

class TreeNode {
    int value;
    TreeNode left;
    TreeNode right;

    TreeNode(int value) {
        this.value = value;
        left = null;
        right = null;
    }
}

public class DFSTreeTraversal {

    // Preorder Traversal (Root, Left, Right)
    public void preorderDFS(TreeNode node) {
        if (node != null) {
            System.out.print(node.value + " ");
            preorderDFS(node.left);
            preorderDFS(node.right);
        }
    }

    // Inorder Traversal (Left, Root, Right)
    public void inorderDFS(TreeNode node) {
        if (node != null) {
            inorderDFS(node.left);
            System.out.print(node.value + " ");
            inorderDFS(node.right);
        }
    }

    // Postorder Traversal (Left, Right, Root)
    public void postorderDFS(TreeNode node) {
        if (node != null) {
            postorderDFS(node.left);
            postorderDFS(node.right);
            System.out.print(node.value + " ");
        }
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.right = new TreeNode(6);

        DFSTreeTraversal dfs = new DFSTreeTraversal();

        System.out.println("Preorder Traversal:");
        dfs.preorderDFS(root);

        System.out.println("\nInorder Traversal:");
        dfs.inorderDFS(root);

        System.out.println("\nPostorder Traversal:");
        dfs.postorderDFS(root);
    }
}


#Breadth-First Search (BFS) in Trees
BFS in trees is typically implemented as level-order traversal, where nodes are visited level by level from left to right.
It uses a queue data structure.

#Breadth-First Search (BFS) in Java
Level-order Traversal
#Implementations :

import java.util.LinkedList;
import java.util.Queue;

class TreeNode {
    int value;
    TreeNode left;
    TreeNode right;

    TreeNode(int value) {
        this.value = value;
        left = null;
        right = null;
    }
}

public class BFSTreeTraversal {

    public void bfs(TreeNode root) {
        if (root == null) return;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            System.out.print(node.value + " ");

            if (node.left != null) queue.add(node.left);
            if (node.right != null) queue.add(node.right);
        }
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.right = new TreeNode(6);

        BFSTreeTraversal bfs = new BFSTreeTraversal();

        System.out.println("BFS (Level-order Traversal):");
        bfs.bfs(root);
    }
}

#Summary:
• DFS in Trees: Involves Preorder, Inorder, and Postorder traversals.
• BFS in Trees: Involves Level-order traversal.
• Both algorithms are essential for different purposes.
DFS is useful for exploring all nodes and edges,
while BFS is effective for finding the shortest path in unweighted graphs and for level-order traversal in trees.