HashMap and Hashtable are both data structures in Java that implement the Map interface, allowing you to store key-value pairs.
Despite their similarities, they have several differences in terms of functionality, performance, and usage.

#HashMap
Non-Synchronized: HashMap is not synchronized, meaning it is not thread-safe. Multiple threads can access and modify it simultaneously without any coordination, which can lead to inconsistent data.
For a thread-safe alternative, you can use Collections.synchronizedMap or ConcurrentHashMap.
Allows Nulls: HashMap allows one null key and multiple null values.
Performance: HashMap generally has better performance than Hashtable due to the lack of synchronization overhead.
Introduced in JDK 1.2: HashMap was introduced later than Hashtable, in JDK 1.2, as part of the Java Collections Framework.
Iterators: HashMap's iterator is fail-fast, which means it will throw a ConcurrentModificationException if the map is modified after the iterator is created, except through the iterator's own remove method.

#Hashtable
Synchronized: Hashtable is synchronized, meaning it is thread-safe.
This synchronization comes with a performance cost because only one thread can access or modify the Hashtable at a time.
No Nulls: Hashtable does not allow null keys or values. Attempting to insert null as a key or value will result in a NullPointerException.
Performance: Due to its synchronization mechanism, Hashtable is generally slower than HashMap.
Legacy Class: Hashtable is considered a legacy class, introduced in JDK 1.0. While it is still used, newer implementations like HashMap and ConcurrentHashMap are preferred.
Iterators: Hashtable's enumerator is not fail-fast, meaning it won't throw a ConcurrentModificationException if the Hashtable is modified during iteration. However, its iterator is.

#Summary
Use HashMap when you need a non-synchronized, high-performance map that allows null keys and values.
Use Hashtable if you need a thread-safe map and can sacrifice performance, but newer alternatives like ConcurrentHashMap are generally recommended for thread-safe operations.

#Collisions:
A collision occurs when two different keys produce the same hash code and thus are assigned to the same bucket.
To handle collisions, most implementations of HashMap use a technique called "chaining," where each bucket contains a linked list of entries that have the same hash code.

#Load Factor and Rehashing
Load Factor:
The load factor is a measure of how full the HashMap is allowed to get before its capacity is automatically increased.
It is calculated as size/capacity, where size is the number of key-value pairs, and capacity is the number of buckets.
A typical load factor is 0.75, meaning the HashMap will increase its capacity when it is 75% full.

Rehashing:
When the load factor threshold is exceeded, the HashMap automatically increases the number of buckets (usually doubling it) and redistributes all the existing entries into the new buckets.
This process is known as rehashing.